---
name: Validate GenTx Files

on:
  pull_request:
    paths:
      - 'mainnet/gentx/*.json'
  workflow_dispatch:
    inputs:
      network:
        description: 'Network to validate (mainnet only)'
        required: false
        default: 'mainnet'

env:
  WARDEND_VERSION: 'v0.7.0-rc3'
  GO_VERSION: '1.24'

jobs:
  validate-gentx:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Dagger CLI
        run: |
          curl -fsSL https://dl.dagger.io/dagger/install.sh | \
            DAGGER_VERSION=v0.18.17 sh
          sudo mv ./bin/dagger /usr/local/bin/dagger
          dagger version

      - name: Run GenTx validation with Dagger
        id: validation
        run: |
          # Set output file for capturing results
          OUTPUT_FILE=$(mktemp)
          ERROR_FILE=$(mktemp)
          EXIT_CODE=0
          
          # Run dagger command and capture output/exit code
          dagger call validate-gentx-cli \
            --source . \
            --network "${{ github.event.inputs.network || 'mainnet' }}" \
            --wardend-version "${{ env.WARDEND_VERSION }}" \
            --go-version "${{ env.GO_VERSION }}" \
            > "$OUTPUT_FILE" 2> "$ERROR_FILE" || EXIT_CODE=$?
          
          # Set outputs for use in subsequent steps
          {
            echo "stdout<<DAGGER_EOF"
            cat "$OUTPUT_FILE"
            echo
            echo "DAGGER_EOF"
          } >> $GITHUB_OUTPUT
          
          {
            echo "stderr<<DAGGER_ERR_EOF"
            cat "$ERROR_FILE"
            echo
            echo "DAGGER_ERR_EOF"
          } >> $GITHUB_OUTPUT
          
          echo "result=$EXIT_CODE" >> $GITHUB_OUTPUT
          
          # Clean up temp files
          rm -f "$OUTPUT_FILE" "$ERROR_FILE"
          
          # Exit with the same code as dagger command
          exit $EXIT_CODE
        continue-on-error: false

      - name: Parse validation results
        id: parse_results
        run: |
          # Set network for downstream steps
          NETWORK="${{ github.event.inputs.network || 'mainnet' }}"
          echo "network=$NETWORK" >> $GITHUB_OUTPUT
          # Parse the validation output to determine status
          echo "=== Validation Results ==="
          echo "Exit Code: ${{ steps.validation.outputs.result }}"
          echo "Output: ${{ steps.validation.outputs.stdout }}"
          if [ -n "${{ steps.validation.outputs.stderr }}" ]; then
            echo "Errors: ${{ steps.validation.outputs.stderr }}"
          fi
          echo "=========================="
          # Check if validation was successful (exit code 0)
          if [ "${{ steps.validation.outputs.result }}" == "0" ]; then
            echo "validation_status=success" >> $GITHUB_OUTPUT
            echo "‚úÖ Validation PASSED"
          else
            echo "validation_status=failed" >> $GITHUB_OUTPUT
            echo "‚ùå Validation FAILED"
          fi

      - name: Comment on PR (Success)
        if: >
          github.event_name == 'pull_request' &&
          steps.parse_results.outputs.validation_status == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const network = '${{ steps.parse_results.outputs.network }}';
            const validationOutput = `${{ steps.validation.outputs.stdout }}`;
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('GenTx Validation Results')
            );

            const commentBody = `## ‚úÖ GenTx Validation Results

            **Status**: ‚úÖ **ALL PASSED**
            **Network**: ${network}
            **Validation Tool**: Dagger CI

            **Results**: ${validationOutput}

            All GenTx files have been successfully validated using Dagger!

            ---
            <sub>ü§ñ Auto-generated by Dagger GenTx validation</sub>`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

      - name: Comment on PR (Failure)
        if: >
          github.event_name == 'pull_request' &&
          steps.parse_results.outputs.validation_status == 'failed'
        uses: actions/github-script@v7
        with:
          script: |
            const network = '${{ steps.parse_results.outputs.network }}';
            const baseUrl = context.payload.repository.html_url;
            const runUrl = `${baseUrl}/actions/runs/${context.runId}`;
            const validationOutput = `${{ steps.validation.outputs.stdout }}`;
            const validationError = `${{ steps.validation.outputs.stderr }}`;

            const commentBody = `## ‚ùå GenTx Validation Results

            **Status**: ‚ùå **FAILED**
            **Network**: ${network}
            **Validation Tool**: Dagger CI

            **Error Output**: 
            \`\`\`
            ${validationOutput}
            ${validationError ? '\n' + validationError : ''}
            \`\`\`

            One or more GenTx files failed validation.
            Check the logs for details: [View Workflow Run](${runUrl})

            Common issues to check:
            - Insufficient fees (minimum: 1.8e17 award)
            - Invalid JSON format
            - Missing required fields
            - Network configuration mismatch

            To run validation locally:
            \`\`\`bash
            dagger call run-local-validation --source . --network ${network}
            \`\`\`

            ---
            <sub>ü§ñ Auto-generated by Dagger GenTx validation</sub>`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });

      - name: Final status check
        run: |
          STATUS="${{ steps.parse_results.outputs.validation_status }}"
          if [ "$STATUS" == "failed" ]; then
            echo "‚ùå Validation failed - exiting with error"
            exit 1
          else
            echo "‚úÖ Validation passed successfully"
          fi
