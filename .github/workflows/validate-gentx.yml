name: Validate GenTx Files

on:
  pull_request:
    paths:
      - 'mainnet/gentx/*.json'
  workflow_dispatch:
    inputs:
      network:
        description: 'Network to validate (mainnet only)'
        required: false
        default: ''

env:
  GO_VERSION: '1.21'
  WARDEND_VERSION: 'v0.7.0-rc3'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      gentx-files: ${{ steps.changes.outputs.gentx-files }}
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed gentx files
        id: changes
        run: |
          echo "Getting changed mainnet gentx files..."

          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && \
             [ -n "${{ github.event.inputs.network }}" ]; then
            # Manual dispatch with specific network
            network="${{ github.event.inputs.network }}"
            echo "Manual workflow dispatch for network: $network"
            GENTX_FILES=$(find mainnet/$network/gentx -name "*.json" \
              2>/dev/null | tr '\n' ' ' || echo "")
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            # PR: get changed mainnet files only
            echo "Pull request detected, checking changed mainnet files..."
            base_ref="origin/${{ github.base_ref }}"
            sha="${{ github.sha }}"
            GENTX_FILES=$(git diff --name-only $base_ref...$sha | \
              grep -E 'mainnet/gentx/.*\.json$' | tr '\n' ' ' || echo "")
          fi

          echo "Found gentx files: $GENTX_FILES"
          echo "gentx-files=$GENTX_FILES" >> $GITHUB_OUTPUT

      - name: Generate test matrix
        id: generate-matrix
        run: |
          GENTX_FILES="${{ steps.changes.outputs.gentx-files }}"

          if [ -z "$GENTX_FILES" ]; then
            echo "No gentx files to validate"
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Build matrix for mainnet networks only
          matrix_items=""

          for file in $GENTX_FILES; do
            if [ -f "$file" ]; then
              # Extract network name from mainnet path
              # (e.g., mainnet/chiado/gentx/file.json -> chiado)
              network=$(echo "$file" | cut -d'/' -f2)
              network_type="mainnet"

              # Find the corresponding genesis file
              genesis_file="mainnet/${network}/genesis.json"

              if [ -f "$genesis_file" ]; then
                if [ -n "$matrix_items" ]; then
                  matrix_items="${matrix_items},"
                fi
                item="{\"gentx_file\":\"$file\""
                item="${item},\"network\":\"$network\""
                item="${item},\"network_type\":\"$network_type\""
                item="${item},\"genesis_file\":\"$genesis_file\"}"
                matrix_items="${matrix_items}${item}"
              else
                echo "Warning: Genesis file not found for network $network"
                echo "Expected at: $genesis_file"
              fi
            fi
          done

          if [ -z "$matrix_items" ]; then
            echo "No valid gentx files found with corresponding genesis files"
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
          else
            echo "matrix={\"include\":[$matrix_items]}" >> $GITHUB_OUTPUT
          fi

          echo "Generated matrix: {\"include\":[$matrix_items]}"

  validate-gentx:
    needs: detect-changes
    if: needs.detect-changes.outputs.gentx-files != ''
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.detect-changes.outputs.matrix) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install wardend
        run: |
          echo "Installing wardend ${{ env.WARDEND_VERSION }}..."

          # Try to download pre-built binary first
          base_url="https://github.com/warden-protocol/wardenprotocol"
          release_url="${base_url}/releases/download/${{ env.WARDEND_VERSION }}"
          binary_url="${release_url}/wardend_linux_amd64"

          if curl -sL "$binary_url" -o /tmp/wardend; then
            chmod +x /tmp/wardend
            sudo mv /tmp/wardend /usr/local/bin/wardend
            echo "‚úÖ Installed wardend binary"
          else
            echo "Pre-built binary not found, building from source..."
            repo_url="https://github.com/warden-protocol/wardenprotocol.git"
            git clone "$repo_url" /tmp/wardenprotocol
            cd /tmp/wardenprotocol
            git checkout ${{ env.WARDEND_VERSION }}
            make build
            sudo cp build/wardend /usr/local/bin/wardend
            echo "‚úÖ Built and installed wardend from source"
          fi

          # Verify installation
          wardend version --long

      - name: Prepare test environment
        run: |
          echo "Preparing test environment for network: ${{ matrix.network }}"
          echo "GenTx file: ${{ matrix.gentx_file }}"
          echo "Genesis file: ${{ matrix.genesis_file }}"

          # Create working directory
          mkdir -p /tmp/gentx-validation
          cd /tmp/gentx-validation

          # Copy the genesis file as init_genesis.json (required by tool)
          workspace="${GITHUB_WORKSPACE}/${{ matrix.genesis_file }}"
          cp "$workspace" ./init_genesis.json

          echo "‚úÖ Prepared test environment"

      - name: Build check-genesis tool
        run: |
          echo "Building check-genesis tool..."
          cd /tmp/gentx-validation

          # Copy the check-genesis tool
          cp -r "$GITHUB_WORKSPACE/utils/check-genesis" ./
          cd check-genesis

          # Build the tool
          go mod tidy
          go build -o ../check-genesis ./check-genesis.go

          echo "‚úÖ Built check-genesis tool"

      - name: Validate GenTx
        run: |
          cd /tmp/gentx-validation

          echo "üöÄ Starting validation for ${{ matrix.gentx_file }}..."
          echo "Network: ${{ matrix.network }} (${{ matrix.network_type }})"
          echo "Genesis file: ${{ matrix.genesis_file }}"
          echo "==========================================="

          # Run the validation
          gentx_path="$GITHUB_WORKSPACE/${{ matrix.gentx_file }}"
          if ./check-genesis "$gentx_path"; then
            echo ""
            echo "‚úÖ GenTx validation PASSED for ${{ matrix.gentx_file }}"
          else
            echo ""
            echo "‚ùå GenTx validation FAILED for ${{ matrix.gentx_file }}"
            exit 1
          fi

      - name: Upload validation logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: validation-logs-${{ matrix.network }}-${{ github.run_id }}
          path: |
            /tmp/gentx-validation/logs.txt
            /tmp/gentx-validation/.warden/logs/
          if-no-files-found: ignore

      - name: Comment on PR (Success)
        if: github.event_name == 'pull_request' && success()
        uses: actions/github-script@v6
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('GenTx Validation Results') &&
              comment.body.includes('${{ matrix.gentx_file }}')
            );

            const file = '${{ matrix.gentx_file }}';
            const network = '${{ matrix.network }}';
            const networkType = '${{ matrix.network_type }}';

            const commentBody = `## ‚úÖ GenTx Validation Results

            **File**: \`${file}\`
            **Network**: \`${network}\` (\`${networkType}\`)
            **Status**: ‚úÖ **PASSED**

            The GenTx file has been successfully validated!

            ---
            <sub>ü§ñ Auto-generated by GenTx validation workflow</sub>`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

      - name: Comment on PR (Failure)
        if: github.event_name == 'pull_request' && failure()
        uses: actions/github-script@v6
        with:
          script: |
            const file = '${{ matrix.gentx_file }}';
            const network = '${{ matrix.network }}';
            const networkType = '${{ matrix.network_type }}';
            const runUrl = context.payload.repository.html_url;

            const commentBody = `## ‚ùå GenTx Validation Results

            **File**: \`${file}\`
            **Network**: \`${network}\` (\`${networkType}\`)
            **Status**: ‚ùå **FAILED**

            The GenTx file validation failed. Check the logs for details:
            [View Workflow Run](${runUrl}/actions/runs/${context.runId})

            Common issues to check:
            - Insufficient fees (minimum: 180000000000000000 award)
            - Invalid JSON format
            - Missing required fields
            - Network configuration mismatch

            ---
            <sub>ü§ñ Auto-generated by GenTx validation workflow</sub>`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });

  summary:
    needs: [detect-changes, validate-gentx]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Validation Summary
        run: |
          echo "## GenTx Validation Summary"
          echo ""

          if [ "${{ needs.detect-changes.outputs.gentx-files }}" = "" ]; then
            echo "üîç No GenTx files were changed in this PR"
            echo "validation_needed=false" >> $GITHUB_ENV
          elif [ "${{ needs.validate-gentx.result }}" = "success" ]; then
            echo "‚úÖ All GenTx validations passed!"
            echo "validation_result=success" >> $GITHUB_ENV
          elif [ "${{ needs.validate-gentx.result }}" = "failure" ]; then
            echo "‚ùå One or more GenTx validations failed"
            echo "validation_result=failure" >> $GITHUB_ENV
            exit 1
          else
            echo "‚ö†Ô∏è GenTx validation was skipped or cancelled"
            echo "validation_result=skipped" >> $GITHUB_ENV
          fi

      - name: Set workflow status
        if: needs.validate-gentx.result == 'failure'
        run: |
          echo "GenTx validation failed"
          exit 1
