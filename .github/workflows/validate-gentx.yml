---
name: Validate GenTx Files

on:
  pull_request:
    paths:
      - 'mainnet/gentx/*.json'
  workflow_dispatch:
    inputs:
      network:
        description: 'Network to validate (mainnet only)'
        required: false
        default: ''

env:
  GO_VERSION: '1.24'
  WARDEND_VERSION: 'v0.7.0-rc3'

jobs:
  validate-gentx:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Pull wardend Docker image
        run: |
          echo "Pulling wardend Docker image for ${{ env.WARDEND_VERSION }}..."
          # Pull the wardend Docker image
          docker_image="ghcr.io/warden-protocol/wardenprotocol/wardend:${{ env.WARDEND_VERSION }}"
          echo "Pulling: $docker_image"
          docker pull "$docker_image"
          echo "‚úÖ Pulled wardend Docker image"

      - name: Get mainnet GenTx files to validate
        id: get-files
        run: |
          echo "Getting mainnet GenTx files to validate..."

          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && \
             [ -n "${{ github.event.inputs.network }}" ]; then
            # Manual dispatch with specific network (only mainnet supported)
            network="${{ github.event.inputs.network }}"
            echo "Manual workflow dispatch for network: $network"
            if [ "$network" = "mainnet" ] && [ -d "mainnet/gentx" ]; then
              GENTX_FILES=$(find mainnet/gentx -name "*.json" \
                2>/dev/null || echo "")
            else
              echo "Only mainnet is supported. GenTx directory: mainnet/gentx"
              GENTX_FILES=""
            fi
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            # PR: get changed mainnet files only
            msg="Pull request detected, checking changed mainnet GenTx files..."
            echo "$msg"
            base_ref="origin/${{ github.base_ref }}"
            sha="${{ github.sha }}"
            GENTX_FILES=$(git diff --name-only $base_ref...$sha | \
              grep -E 'mainnet/gentx/.*\.json$' || echo "")
          else
            # Fallback: validate all mainnet GenTx files
            echo "Validating all mainnet GenTx files..."
            GENTX_FILES=$(find mainnet/gentx -name "*.json" \
              2>/dev/null || echo "")
          fi

          if [ -z "$GENTX_FILES" ]; then
            echo "No GenTx files found to validate"
            echo "has-files=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Found GenTx files to validate:"
          echo "$GENTX_FILES" | while read -r file; do
            echo "  - $file"
          done

          # Store files for later steps
          echo "$GENTX_FILES" > /tmp/gentx-files.txt
          echo "has-files=true" >> $GITHUB_OUTPUT

      - name: Build check-genesis tool
        if: steps.get-files.outputs.has-files == 'true'
        run: |
          echo "Building check-genesis tool..."
          mkdir -p /tmp/gentx-validation
          cd /tmp/gentx-validation

          # Copy the check-genesis tool
          cp -r "$GITHUB_WORKSPACE/utils/check-genesis" ./
          cd check-genesis

          # Build the tool
          go mod tidy
          go build -o ../check-genesis ./check-genesis.go

          echo "‚úÖ Built check-genesis tool"

      - name: Validate all GenTx files
        if: steps.get-files.outputs.has-files == 'true'
        run: |
          cd /tmp/gentx-validation

          echo "üöÄ Starting GenTx validation..."
          echo "==========================================="

          # Read the list of files to validate
          GENTX_FILES=$(cat /tmp/gentx-files.txt)
          VALIDATION_FAILED=false
          FAILED_FILES=""
          VALIDATED_COUNT=0
          NETWORKS_VALIDATED="mainnet"
          DOCKER_IMAGE="ghcr.io/warden-protocol/wardenprotocol/wardend:${{ env.WARDEND_VERSION }}"

          # Check if genesis file exists
          genesis_file="mainnet/init_genesis.json"
          if [ ! -f "$GITHUB_WORKSPACE/$genesis_file" ]; then
            echo "‚ùå Genesis file not found: $genesis_file"
            echo "Cannot proceed with validation without genesis file."
            exit 1
          fi

          # Copy genesis file for validation
          cp "$GITHUB_WORKSPACE/$genesis_file" ./init_genesis.json
          echo "‚úÖ Using genesis file: $genesis_file"

          for gentx_file in $GENTX_FILES; do
            if [ ! -f "$GITHUB_WORKSPACE/$gentx_file" ]; then
              echo "‚ö†Ô∏è  File not found: $gentx_file (skipping)"
              continue
            fi

            echo ""
            echo "üìÅ Validating: $gentx_file"
            echo "   Network: mainnet"
            echo "   Genesis: $genesis_file"

            # Create a temporary directory for this validation
            TEMP_DIR="/tmp/gentx-validation/$(basename $gentx_file .json)"
            mkdir -p "$TEMP_DIR"
            
            # Copy required files to temp directory
            cp ./init_genesis.json "$TEMP_DIR/"
            cp "$GITHUB_WORKSPACE/$gentx_file" "$TEMP_DIR/"
            cp ./check-genesis "$TEMP_DIR/"
            
            # Run validation using Docker with volume mount
            # Mount the temp directory and run the check-genesis tool inside the container
            if docker run --rm \
                -v "$TEMP_DIR:/workspace" \
                -w /workspace \
                --entrypoint="/bin/bash" \
                "$DOCKER_IMAGE" \
                ./check-genesis "$(basename $gentx_file)"; then
              echo "   ‚úÖ PASSED"
              VALIDATED_COUNT=$((VALIDATED_COUNT + 1))
            else
              echo "   ‚ùå FAILED"
              VALIDATION_FAILED=true
              FAILED_FILES="$FAILED_FILES\n  - $gentx_file"
            fi
            
            # Clean up temp directory
            rm -rf "$TEMP_DIR"
          done

          echo ""
          echo "==========================================="
          echo "üìä Validation Summary:"
          echo "   Files validated: $VALIDATED_COUNT"
          echo "   Networks: $NETWORKS_VALIDATED"

          if [ "$VALIDATION_FAILED" = "true" ]; then
            echo "   Status: ‚ùå FAILED"
            echo ""
            echo "Failed files:"
            echo -e "$FAILED_FILES"
            exit 1
          else
            echo "   Status: ‚úÖ ALL PASSED"
          fi

          # Store results for PR comment
          echo "validated_count=$VALIDATED_COUNT" >> $GITHUB_ENV
          echo "networks_validated=$NETWORKS_VALIDATED" >> $GITHUB_ENV

      - name: Upload validation logs
        if: always() && steps.get-files.outputs.has-files == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: gentx-validation-logs-${{ github.run_id }}
          path: |
            /tmp/gentx-validation/logs.txt
            /tmp/gentx-validation/.warden/logs/
          if-no-files-found: ignore

      - name: Comment on PR (Success)
        if: >
          github.event_name == 'pull_request' && 
          success() && 
          steps.get-files.outputs.has-files == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('GenTx Validation Results')
            );

            const validatedCount = process.env.validated_count || '0';
            const networksValidated = process.env.networks_validated || 'none';

            const commentBody = `## ‚úÖ GenTx Validation Results

            **Status**: ‚úÖ **ALL PASSED**
            **Files validated**: ${validatedCount}
            **Networks**: ${networksValidated}

            All GenTx files have been successfully validated!

            ---
            <sub>ü§ñ Auto-generated by GenTx validation workflow</sub>`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

      - name: Comment on PR (Failure)
        if: >
          github.event_name == 'pull_request' && 
          failure() && 
          steps.get-files.outputs.has-files == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const baseUrl = context.payload.repository.html_url;
            const runUrl = `${baseUrl}/actions/runs/${context.runId}`;

            const commentBody = `## ‚ùå GenTx Validation Results

            **Status**: ‚ùå **FAILED**

            One or more GenTx files failed validation.
            Check the logs for details: [View Workflow Run](${runUrl})

            Common issues to check:
            - Insufficient fees (minimum: 1.8e17 award)
            - Invalid JSON format
            - Missing required fields
            - Network configuration mismatch

            ---
            <sub>ü§ñ Auto-generated by GenTx validation workflow</sub>`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });

      - name: Comment on PR (No files)
        if: >
          github.event_name == 'pull_request' && 
          steps.get-files.outputs.has-files == 'false'
        uses: actions/github-script@v6
        with:
          script: |
            const commentBody = `## üîç GenTx Validation Results

            **Status**: ‚ÑπÔ∏è **NO FILES TO VALIDATE**

            No mainnet GenTx files were modified in this PR.

            ---
            <sub>ü§ñ Auto-generated by GenTx validation workflow</sub>`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
